#!/usr/bin/python3

##
## EPITECH PROJECT, 2022
## 110borwein
## File description:
## MATH
##

import math
import sys
import os
from math import *
from sys import *
from os import *

#####################################################################################
##            ##            ##        MAN HELP      ##            ##               ##
#####################################################################################

def man_help():
    print("USAGE")
    print("    ./110borwein n\n")
    print("DESCRIPTION")
    print("    n   constant defining the integral to be computed")
    exit(0)

#####################################################################################
##            ##            ##        check_string      ##            ##           ##
#####################################################################################

def     check_string(string):
    i = 0
    while (i < len(string)):
        if (string[i] < '.' and string[i] > '/'
            and string[i] < '0' or string[i] > '9'):
            print("Invalid argument")
            exit(84)
        i = i + 1


#####################################################################################
##            ##            ##        GET  SUM          ##            ##           ##
#####################################################################################

def sum(x, i):
    result = 1.0
    a = 0
    while (a <= x):
        if (i != 0):
            result *= (math.sin(i / (2 * a + 1)) / (i / (2 * a + 1)))
        a += 1
    return (result)

#####################################################################################
##          ##            ##        SIMPSON METHOD      ##         ##              ##
#####################################################################################

def simpson_method(x):
    res = 0.0
    ult = 0.0
    b = 5000
    n = 10000
    h = b / n
    a = 1
    while (a < 10000):
        res += sum(x, a * h)
        a += 1
    a = 0
    while (a < 10000):
        ult += sum(x, (a * h) + (h / 2))
        a += 1
    result = sum(x, 5000) + sum(x, 0) + (2 * res) + (4 * ult)
    result *= (b / (6 * n))
    return (result)
#####################################################################################
##        ##         ##        TRAPEZOIDALE INTEGRALE      ##         ##           ##
#####################################################################################

def trapezoidal(x):
    result = 0.0
    b = 5000
    n = 10000
    h = b / n
    a = 1
    while (a < 10000):
        result += sum(x, a * h)
        a += 1
    result *= 2
    result += sum(x, 5000)
    result += sum(x, 0)
    result *= (h / 2)
    return (result)

#####################################################################################
##        ##             ##        MIDPOINT METHOD     ##             ##           ##
#####################################################################################

def midpoint_method(x):
    result = 0.0
    b = 5000
    a = 0
    n = 10000
    h = (b - a) / n
    while (a < 10000):
        result += sum(x, a * h)
        a += 1
    result *= h
    return (result)

#####################################################################################
##            ##            ##          MAIN            ##            ##           ##
#####################################################################################

if (len(sys.argv) == 2):
    if (sys.argv[1] == "-h"):   
        man_help()
        exit(0)

    if (sys.argv[1].isdigit() == True):
        x = float(sys.argv[1])
        result = midpoint_method(x)
        print(str("Midpoint:\nI" + str(int(x)) + " = " + "%.10f" % result))
        if (str("%.10f" % (result - (math.pi / 2))) == "-0.0000000000"):
            print(str("diff = " + "%.10f" % (-1 * (result - (math.pi / 2))) + "\n"))
        else:
            print(str("diff = " + "%.10f" % (result - (math.pi / 2)) + "\n"))
        result = trapezoidal(x)
        print(str("Trapezoidal:\nI" + str(int(x)) + " = " + "%.10f" % result))
        if (str("%.10f" % (result - (math.pi / 2))) == "-0.0000000000"):
            print(str("diff = " + "%.10f" % ((result - (math.pi / 2))) + "\n"))
        else:
            print(str("diff = " + "%.10f" % (-1 * (result - (math.pi / 2))) + "\n"))
        result = simpson_method(x)
        print(str("Simpson:\nI" + str(int(x)) + " = " + "%.10f" % result))
        if (str("%.10f" % (result - (math.pi / 2))) == "-0.0000000000"):
            print(str("diff = " + "%.10f" % (result - (math.pi / 2))))
        else:
            print(str("diff = " + "%.10f" % (-1 * (result - (math.pi / 2)))))
    else:
        sys.stdout.write("Not an integer number\n")
        exit(84)

else:
    sys.stdout.write("Invalid number of argument\n")
    exit(84)
